#include <bits/stdc++.h>
using namespace std;
#define INF 10e12
typedef long long ll;

void WypiszDroge(ll tab[], ll start)
{
    if(tab[start] == -1)
    {
        cout<<start<<" ";
        return;
    }
    WypiszDroge(tab, tab[start]);
    cout<<start<<" ";
    
}

int main()
{
    ios_base::sync_with_stdio(0);
    
    
    int n;
    int m;
    cin>>n>>m;
    vector <pair <int, int> > G[n+1];
    
    for(int i=1; i<=m; i++)
    {
        int a,b,c;
        cin>>a>>b>>c;
        G[a].push_back({b,c});
        G[b].push_back({a,c});
    }
    
    //priority_queue < pair< int, int> > Q;
    priority_queue < pair<ll,ll> ,vector<pair<ll,ll>>, greater <pair<ll,ll>> > Q;
    
    ll dist[n+1];
    for(int i=0; i<n+1; i++)dist[i] = INF;
    dist[1] = 0;
    ll droga[n+1];
     for(int i=0; i<n+1; i++)droga[i] = -1;
    
    Q.push({0,1});
   
    while(!Q.empty())
    {
        auto akt = Q.top();
        Q.pop();
        
        for(auto w:G[akt.second])
        {
            ll node = w.first;
            ll koszt = w.second;
            if(dist[node] > dist[akt.second] + koszt)
            {
                dist[node] = dist[akt.second] + koszt;
                Q.push({dist[node] ,node});
                droga[node] = akt.second;
            }
        }
    }
    
//    cout<<"\n\n";
//    for(auto a:dist)cout<<a<<" ";
//    cout<<"\n\n";
//    for(auto a:droga)cout<<a<<" ";
//    cout<<"\n\n";
    
    if(dist[n] == INF)
    {
        cout<<-1;
        return 0;
    }
    WypiszDroge(droga, droga[n]);
    cout<<n<<"\n";
  
    
    
    
    return 0;
}

